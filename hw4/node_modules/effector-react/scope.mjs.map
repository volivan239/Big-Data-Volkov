{"version":3,"file":"scope.mjs","sources":["effector-react/createWatch.ts","effector-react/withDisplayName.ts","effector-react/apiBase.ts","effector-react/scope.ts","effector-react/../effector/config.ts","effector-react/../effector/is.ts","effector-react/../effector/throw.ts","effector-react/createGate.ts","effector-react/ssr.ts","effector-react/throw.ts","effector-react/useIsomorphicLayoutEffect.ts","effector-react/../effector/collection.ts","effector-react/deprecate.ts"],"sourcesContent":["import {Store, clearNode, step, createNode, Scope, Node, Cmd} from 'effector'\n\nexport function createWatch<T>(\n  store: Store<T>,\n  fn: (value: T) => any,\n  scope?: Scope,\n  batchStep?: Cmd,\n) {\n  const seq: Cmd[] = [\n    step.mov({\n      store: (store as any).stateRef,\n      to: 'stack',\n    }),\n    step.run({fn: (v) => fn(v)}),\n  ]\n  if (batchStep) seq.unshift(batchStep)\n  if (scope) {\n    const node = createNode({\n      node: seq,\n      meta: {\n        watchOp: \"store\"\n      },\n    })\n    const id = (store as any).graphite.id\n    const scopeLinks: {[_: string]: Node[]} = (scope as any).additionalLinks\n    const links = scopeLinks[id] || []\n    scopeLinks[id] = links\n    links.push(node)\n    return () => {\n      const idx = links.indexOf(node)\n      if (idx !== -1) links.splice(idx, 1)\n      clearNode(node)\n    }\n  } else {\n    const node = createNode({\n      node: seq,\n      parent: [store],\n      family: {owners: store},\n    })\n    return () => {\n      clearNode(node)\n    }\n  }\n}\n","export function withDisplayName(name: string, Component: any) {\n  Component.displayName = name\n  return Component\n}\n","import {Store, is, step, scopeBind, Scope, Unit, Event} from 'effector'\nimport React from 'react'\nimport {useSyncExternalStore} from 'use-sync-external-store/shim'\nimport {useSyncExternalStoreWithSelector} from 'use-sync-external-store/shim/with-selector'\nimport {throwError} from './throw'\nimport {createWatch} from './createWatch'\nimport {withDisplayName} from './withDisplayName'\nimport {useIsomorphicLayoutEffect} from './useIsomorphicLayoutEffect'\nimport {Gate} from './index.h'\n\nconst stateReader = <T>(store: Store<T>, scope?: Scope) =>\n  scope ? scope.getState(store) : store.getState()\nconst basicUpdateFilter = <T>(upd: T, oldValue: T) => upd !== oldValue\nconst keysEqual = (a?: readonly any[], b?: readonly any[]) => {\n  if (!a || !b || a.length !== b.length) return false\n\n  let isEqual = true\n\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] !== b[i]) {\n      isEqual = false\n      break\n    }\n  }\n\n  return isEqual\n}\n\nexport function useStoreBase<State>(store: Store<State>, scope?: Scope) {\n  if (!is.store(store)) throwError('expect useStore argument to be a store')\n\n  const subscribe = React.useCallback(\n    (cb: () => void) => createWatch(store, cb, scope),\n    [store, scope],\n  )\n  const read = React.useCallback(\n    () => stateReader(store, scope),\n    [store, scope],\n  )\n  const currentValue = useSyncExternalStore(subscribe, read, read)\n\n  return currentValue\n}\n\nexport function useUnitBase<Shape extends {[key: string]: Unit<any>}>(\n  shape: Shape | {'@@unitShape': () => Shape},\n  scope?: Scope,\n) {\n  const isSingleUnit = is.unit(shape)\n  let normShape: {[key: string]: Unit<any>} = {}\n  if (isSingleUnit) {\n    normShape = {unit: shape}\n  } else if ('@@unitShape' in shape) {\n    if (typeof shape['@@unitShape'] === 'function') {\n      normShape = shape['@@unitShape']()\n    } else {\n      throwError('expect @@unitShape to be a function')\n    }\n  } else {\n    normShape = shape\n  }\n  const isList = Array.isArray(normShape)\n  const flagsRef = React.useRef({\n    stale: true,\n    justSubscribed: false,\n    scope,\n  })\n  const [eventsShape, storeKeys, storeValues, eventKeys, eventValues] =\n    React.useMemo(() => {\n      flagsRef.current.stale = true\n      const shape = Array.isArray(normShape) ? [] : ({} as any)\n      const storeKeys: string[] = []\n      const storeValues: Array<Store<any>> = []\n      const eventKeys: string[] = []\n      const eventValues: Array<Unit<any>> = []\n      for (const key in normShape) {\n        const unit = normShape[key]\n        if (!is.unit(unit)) throwError('expect useUnit argument to be a unit')\n        if (is.event(unit) || is.effect(unit)) {\n          shape[key] = scope ? scopeBind(unit as Event<any>, {scope}) : unit\n          eventKeys.push(key)\n          eventValues.push(unit)\n        } else {\n          shape[key] = null\n          storeKeys.push(key)\n          storeValues.push(unit as Store<any>)\n        }\n      }\n      return [shape, storeKeys, storeValues, eventKeys, eventValues]\n    }, [\n      flagsRef,\n      scope,\n      ...Object.keys(normShape),\n      ...Object.values(normShape),\n    ])\n  const stateRef = React.useRef({\n    value: eventsShape,\n    storeKeys,\n    eventKeys,\n    eventValues,\n  })\n  const subscribe = React.useCallback(\n    (cb: () => void) => {\n      const flags = flagsRef.current\n      flags.justSubscribed = true\n      const cbCaller = () => {\n        if (!flags.stale) {\n          flags.stale = true\n          cb()\n        }\n      }\n      const batchStep = step.compute({priority: 'sampler', batch: true})\n      const subs = storeValues.map(store =>\n        createWatch(store, cbCaller, scope, batchStep),\n      )\n      return () => {\n        subs.forEach(fn => fn())\n      }\n    },\n    [storeValues, scope, stateRef, flagsRef],\n  )\n  const read = React.useCallback(() => {\n    const state = stateRef.current\n    const flags = flagsRef.current\n    let resultValue\n    let changed = false\n    const oldVal = state.value\n    const oldStoreKeys = state.storeKeys\n    const oldEventKeys = state.eventKeys\n    const oldEventValues = state.eventValues\n    const scopeChanged = scope !== flags.scope\n    if (flags.stale || flags.justSubscribed || scopeChanged) {\n      changed = !flags.justSubscribed || scopeChanged\n      resultValue = isList ? [...eventsShape] : {...eventsShape}\n      if (\n        oldStoreKeys.length !== storeKeys.length ||\n        oldEventKeys.length !== eventKeys.length\n      ) {\n        changed = true\n      }\n      for (let i = 0; i < storeKeys.length; i++) {\n        const updatedValue = stateReader(storeValues[i], scope)\n        const key = storeKeys[i]\n        if (!changed) {\n          if (!oldStoreKeys.includes(key)) {\n            changed = true\n          } else {\n            changed = oldVal[key] !== updatedValue\n          }\n        }\n        resultValue[key] = updatedValue\n      }\n      for (let i = 0; i < eventKeys.length; i++) {\n        const updatedValue = eventValues[i]\n        const key = eventKeys[i]\n        if (!changed) {\n          if (!oldEventKeys.includes(key)) {\n            changed = true\n          } else {\n            changed = oldEventValues[oldEventKeys.indexOf(key)] !== updatedValue\n          }\n        }\n      }\n    }\n    if (changed) {\n      state.value = resultValue\n    }\n    state.storeKeys = storeKeys\n    state.eventKeys = eventKeys\n    state.eventValues = eventValues\n    flags.stale = false\n    flags.justSubscribed = !changed\n    flags.scope = scope\n    return isSingleUnit ? state.value.unit : state.value\n  }, [subscribe, storeValues, eventValues, scope, stateRef, flagsRef])\n  return useSyncExternalStore(subscribe, read, read)\n}\n\nexport function useStoreMapBase<State, Result, Keys extends ReadonlyArray<any>>(\n  [configOrStore, separateFn]: [\n    configOrStore:\n      | {\n          store: Store<State>\n          keys: Keys\n          fn(state: State, keys: Keys): Result\n          updateFilter?: (update: Result, current: Result) => boolean\n          defaultValue?: Result\n        }\n      | Store<State>,\n    separateFn?: (state: State, keys: Keys) => Result,\n  ],\n  scope?: Scope,\n): Result {\n  let fn: (state: State, keys: Keys) => Result\n  let updateFilter: (update: Result, current: Result) => boolean =\n    basicUpdateFilter\n  let defaultValue: Result | undefined\n  let store: Store<State>\n  let keys: Keys\n  if (separateFn) {\n    fn = separateFn\n    store = configOrStore as Store<State>\n    keys = [] as unknown as Keys\n  } else {\n    ;({\n      fn,\n      store,\n      keys,\n      defaultValue,\n      updateFilter = basicUpdateFilter,\n    } = configOrStore as any)\n  }\n  if (!is.store(store)) throwError('useStoreMap expects a store')\n  if (!Array.isArray(keys)) throwError('useStoreMap expects an array as keys')\n  if (typeof fn !== 'function') throwError('useStoreMap expects a function')\n\n  const subscribe = React.useCallback(\n    (cb: () => void) => createWatch(store, cb, scope),\n    [store, scope],\n  )\n  const read = React.useCallback(\n    () => stateReader(store, scope),\n    [store, scope],\n  )\n\n  const stateRef = React.useRef<State>()\n  const valueRef = React.useRef<Result>()\n  const keysRef = React.useRef(keys)\n\n  const value = useSyncExternalStoreWithSelector(\n    subscribe,\n    read,\n    read,\n    state => {\n      if (stateRef.current !== state || !keysEqual(keysRef.current, keys)) {\n        let result = fn(state, keys)\n        if (result === undefined && defaultValue !== undefined) {\n          result = defaultValue\n        }\n        stateRef.current = state\n        keysRef.current = keys\n\n        /**\n         * skip update, if undefined\n         * just like original store or previous implementation\n         */\n        if (result !== undefined) {\n          valueRef.current = result\n        }\n      }\n\n      return valueRef.current as Result\n    },\n    (current, update) => !updateFilter(update, current),\n  )\n\n  return value\n}\nexport function useListBase<T>(\n  list: Store<T[]>,\n  renderItem:\n    | {\n        keys?: any[]\n        fn(item: T, index: number): React.ReactNode\n        getKey?: (item: T) => string\n        placeholder?: React.ReactNode\n      }\n    | ((item: T, index: number) => React.ReactNode),\n  scope?: Scope,\n): React.ReactNode {\n  let keys = [] as any[]\n  let fn\n  let getKey: ((item: T) => string) | void\n  let placeholder: React.ReactNode | void\n  if (typeof renderItem === 'object' && renderItem !== null) {\n    if (renderItem.keys) keys = renderItem.keys\n    ;({fn, getKey, placeholder} = renderItem)\n  } else {\n    fn = renderItem\n  }\n  if (!is.store(list)) throwError('expect useList first argument to be a store')\n  if (typeof fn !== 'function')\n    throwError(\"expect useList's renderItem to be a function\")\n  if (!Array.isArray(keys)) throwError(\"expect useList's keys to be an array\")\n  const Item = React.useMemo(() => {\n    const Item = withDisplayName(\n      `${list.shortName || 'Unknown'}.Item`,\n      (\n        props:\n          | {index: number; keys: any[]; keyVal: never; value: never}\n          | {index: never; keys: any[]; keyVal: string; value: T},\n      ) => {\n        const {index, keys, keyVal, value} = props\n        const isKeyed = !!fnRef.current[1]\n        if (isKeyed) {\n          return fnRef.current[0](value, keyVal as any)\n        }\n        const item = useStoreMapBase(\n          [\n            {\n              store: list,\n              keys: [index, ...keys],\n              fn: (list, keys) => list[keys[0]],\n            },\n          ],\n          scope,\n        )\n        return fnRef.current[0](item, index)\n      },\n    )\n    return React.memo(Item)\n  }, [list, scope, !!getKey!])\n  const fnRef = React.useRef([fn, getKey!] as const)\n  fnRef.current = [fn, getKey!]\n  const keysSelfMemo = React.useMemo(() => keys, keys)\n  if (getKey!) {\n    const listItems = useStoreBase(list, scope)\n    if (listItems.length === 0 && placeholder) return placeholder\n    return listItems.map(value => {\n      const key = fnRef.current[1](value)\n      return React.createElement(Item, {\n        keyVal: key,\n        key,\n        keys: keysSelfMemo,\n        value,\n      })\n    })\n  } else {\n    const length = useStoreMapBase(\n      [\n        {\n          store: list,\n          keys: [list],\n          fn: list => list.length,\n        },\n      ],\n      scope,\n    )\n    if (length === 0 && placeholder) return placeholder\n    return Array.from({length}, (_, i) =>\n      React.createElement(Item, {\n        index: i,\n        key: i,\n        keys: keysSelfMemo,\n      }),\n    )\n  }\n}\n\nexport function useEventBase(eventObject: any, scope?: Scope) {\n  if (!scope) {\n    return eventObject\n  }\n  const isShape = !is.unit(eventObject) && typeof eventObject === 'object'\n  const events = isShape ? eventObject : {event: eventObject}\n\n  return React.useMemo(() => {\n    if (is.unit(eventObject)) {\n      //@ts-expect-error\n      return scopeBind(eventObject, {scope})\n    }\n    const shape = Array.isArray(eventObject) ? [] : ({} as any)\n    for (const key in eventObject) {\n      shape[key] = scopeBind(eventObject[key], {scope})\n    }\n    return shape\n  }, [scope, ...Object.keys(events), ...Object.values(events)])\n}\n\nexport function useGateBase<Props>(\n  GateComponent: Gate<Props>,\n  props: Props = {} as any,\n  scope?: Scope,\n) {\n  const {open, close, set} = useUnitBase(\n    {\n      open: GateComponent.open,\n      close: GateComponent.close,\n      set: GateComponent.set,\n    },\n    scope,\n  )\n  const ForkedGate = React.useMemo(\n    () =>\n      ({\n        open,\n        close,\n        set,\n      } as Gate<Props>),\n    [GateComponent, open],\n  )\n\n  const propsRef = React.useRef<{value: any; count: number}>({\n    value: null,\n    count: 0,\n  })\n  useIsomorphicLayoutEffect(() => {\n    ForkedGate.open(propsRef.current.value)\n    return () => ForkedGate.close(propsRef.current.value) as any\n  }, [ForkedGate])\n  if (!shallowCompare(propsRef.current.value, props)) {\n    propsRef.current.value = props\n    propsRef.current.count += 1\n  }\n  useIsomorphicLayoutEffect(() => {\n    ForkedGate.set(propsRef.current.value)\n  }, [propsRef.current.count])\n}\n\nfunction shallowCompare(a: any, b: any) {\n  if (a === b) return true\n  if (\n    typeof a === 'object' &&\n    a !== null &&\n    typeof b === 'object' &&\n    b !== null\n  ) {\n    const aKeys = Object.keys(a)\n    const bKeys = Object.keys(b)\n    if (aKeys.length !== bKeys.length) return false\n    for (let i = 0; i < aKeys.length; i++) {\n      const key = aKeys[i]\n      if (a[key] !== b[key]) return false\n    }\n    return true\n  }\n  return false\n}\n","import React from 'react'\nimport {Scope} from 'effector'\nimport {throwError} from './throw'\n\nconst ScopeContext = React.createContext(null as Scope | null)\nexport const {Provider} = ScopeContext\nexport function getScope(forceScope?: boolean) {\n  const scope = React.useContext(ScopeContext)\n  if (forceScope && !scope)\n    throwError('No scope found, consider adding <Provider> to app root')\n  return scope as Scope\n}\n","import {forIn} from './collection'\nimport {assertObject, isObject, isVoid} from './is'\n\nexport function processArgsToConfig(\n  arg: any,\n  singleArgument: true,\n): [any, any | void]\nexport function processArgsToConfig(args: any[]): [any[], any | void]\nexport function processArgsToConfig(\n  args: any[],\n  singleArgument?: boolean,\n): [any[], any | void] {\n  const rawConfig = singleArgument ? args : args[0]\n  assertObject(rawConfig)\n  let metadata = rawConfig.or\n  const childConfig = rawConfig.and\n  if (childConfig) {\n    const unwrappedNestedValue = singleArgument ? childConfig : childConfig[0]\n    /**\n     * if there is no \"and\" field then we reached the leaf of the tree\n     * and this is an original user-defined argument\n     *\n     * note that in this case we're returning all arguments, not the only one been unwrapped\n     **/\n    if (!isObject(unwrappedNestedValue) || !('and' in unwrappedNestedValue)) {\n      args = childConfig\n    } else {\n      //@ts-expect-error\n      const nested = processArgsToConfig(childConfig, singleArgument)\n\n      args = nested[0]\n      metadata = {...metadata, ...nested[1]}\n    }\n  }\n  return [args, metadata]\n}\n\n/**\nprocessed fields:\n\n'name',\n'sid',\n'loc',\n'handler',\n'updateFilter',\n'parent',\n'serialize',\n'named',\n'derived',\n*/\nexport const flattenConfig = (part: any, config: Record<string, any> = {}) => {\n  if (isObject(part)) {\n    flattenConfig(part.or, config)\n    forIn(part, (value, field) => {\n      if (!isVoid(value) && field !== 'or' && field !== 'and') {\n        config[field] = value\n      }\n    })\n    flattenConfig(part.and, config)\n  }\n  return config\n}\n","export * as is from './validate'\nimport {forEach} from './collection'\nimport {assert, deprecate} from './throw'\nimport {arrifyNodes} from './createNode'\nimport type {NodeUnit} from './index.h'\nimport type {DataCarrier} from './unit.h'\nimport {getMeta} from './getter'\n\nexport const isObject = (value: unknown): value is Record<any, any> =>\n  typeof value === 'object' && value !== null\nexport const isFunction = (value: unknown): value is Function =>\n  typeof value === 'function'\n\nexport const isVoid = (value: unknown): value is void => value === undefined\n\nexport const assertObject = (value: unknown) =>\n  assert(\n    isObject(value) || isFunction(value),\n    'expect first argument be an object',\n  ) // or function\n\nconst assertNodeSetItem = (\n  value: unknown,\n  method: string,\n  valueName: string,\n  reason: string,\n): asserts value is DataCarrier =>\n  assert(\n    !(\n      (!isObject(value) && !isFunction(value)) ||\n      (!('family' in value) && !('graphite' in value))\n    ),\n    `${method}: expect ${valueName} to be a unit (store, event or effect)${reason}`,\n  )\n\nexport const assertNodeSet = (\n  value: unknown,\n  method: string,\n  valueName: string,\n) => {\n  if (Array.isArray(value)) {\n    forEach(value, (item, i) =>\n      assertNodeSetItem(item, method, `${i} item of ${valueName}`, ''),\n    )\n  } else {\n    //@ts-expect-error some ts assertion edge case\n    assertNodeSetItem(value, method, valueName, ' or array of units')\n  }\n}\n\nexport const assertTarget = (\n  method: string,\n  target: NodeUnit | NodeUnit[],\n  targetField: string = 'target',\n) =>\n  forEach(arrifyNodes(target), item =>\n    deprecate(\n      !getMeta(item, 'derived'),\n      `${method}: derived unit in \"${targetField}\"`,\n      `createEvent/createStore`,\n    ),\n  )\n","export function assert(condition: unknown, message: string): asserts condition {\n  if (!condition) throw Error(message)\n}\n\nexport const deprecate = (\n  condition: unknown,\n  subject: string,\n  suggestion?: string,\n) =>\n  !condition &&\n  console.error(\n    `${subject} is deprecated${\n      suggestion ? `, use ${suggestion} instead` : ''\n    }`,\n  )\n","import {createStore, launch, Domain, createEvent} from 'effector'\nimport {Gate} from './index.h'\nimport {withDisplayName} from './withDisplayName'\nimport {useGateBase} from './apiBase'\nimport {getScope} from './scope'\nimport {flattenConfig, processArgsToConfig} from '../effector/config'\nimport {isObject} from '../effector/is'\n\nexport function createGateImplementation<State>({\n  domain,\n  defaultState,\n  hook: useGateHook,\n  mainConfig,\n  maybeConfig,\n}: {\n  domain?: Domain\n  defaultState: State | {}\n  hook: typeof useGateBase\n  mainConfig?: Record<string, any>\n  maybeConfig?: Record<string, any> & {sid?: string}\n}): Gate<State> {\n  const config = flattenConfig({\n    or: maybeConfig,\n    and: mainConfig,\n  }) as {sid: string | undefined; name: string | undefined}\n  const name = config.name || 'gate'\n  const fullName = `${domain ? `${domain.compositeName.fullName}/` : ''}${name}`\n  const set = createEvent<State>({\n    name: `${fullName}.set`,\n    sid: config.sid ? `${config.sid}|set` : undefined,\n  })\n  const open = createEvent<State>({\n    name: `${fullName}.open`,\n    sid: config.sid ? `${config.sid}|open` : undefined,\n  })\n  const close = createEvent<State>({\n    name: `${fullName}.close`,\n    sid: config.sid ? `${config.sid}|close` : undefined,\n  })\n  const status = createStore(Boolean(false), {\n    name: `${fullName}.status`,\n    serialize: 'ignore',\n    // doesn't need to have sid, because it is internal store, should not be serialized\n  })\n    .on(open, () => Boolean(true))\n    .on(close, () => Boolean(false))\n  const state = createStore(defaultState as State, {\n    name: `${fullName}.state`,\n    sid: config.sid,\n  })\n    .on(set, (_, state) => state)\n    .on(open, (_, state) => state)\n    .reset(close)\n  if (domain) {\n    const {hooks} = domain as any\n    launch({\n      target: [\n        hooks.store,\n        hooks.store,\n        hooks.event,\n        hooks.event,\n        hooks.event,\n      ] as any,\n      params: [status, state, open, close, set],\n    })\n  }\n  function GateComponent(props: State) {\n    useGateHook(GateComponent as any, props, getScope())\n    return null\n  }\n  GateComponent.open = open\n  GateComponent.close = close\n  GateComponent.status = status\n  GateComponent.state = state\n  GateComponent.set = set\n  return withDisplayName(`Gate:${fullName}`, GateComponent)\n}\n\nconst isPluginConfig = (config: Record<string, any> | string) =>\n  isObject(config) && 'sid' in config\n\nconst isGateConfig = (config: Record<string, any> | string) =>\n  isObject(config) &&\n  ('domain' in config || 'defaultState' in config || 'name' in config)\n\nconst isStructuredConfig = (arg: unknown) =>\n  isObject(arg) && (arg.and || arg.or)\n\nexport function processCreateGateConfig<State>(\n  hook: typeof useGateBase,\n  args: unknown[],\n): {\n  domain?: Domain\n  defaultState: State | {}\n  hook: typeof useGateBase\n  mainConfig?: Record<string, any>\n  maybeConfig?: Record<string, any> & {sid?: string}\n} {\n  const universalConfig =\n    args && isStructuredConfig(args[0]) ? args : [{and: args}]\n  const [[nameOrConfig, defaultStateOrConfig], metadata] =\n    processArgsToConfig(universalConfig)\n\n  let domain\n  let defaultState = {}\n  let mainConfig = {}\n  let maybeConfig = metadata\n\n  if (typeof nameOrConfig === 'string') {\n    mainConfig = {name: nameOrConfig}\n    if (isPluginConfig(defaultStateOrConfig)) {\n      // maybeConfig = defaultStateOrConfig\n    } else {\n      defaultState = defaultStateOrConfig || {}\n    }\n  } else if (isGateConfig(nameOrConfig)) {\n    mainConfig = nameOrConfig\n    defaultState = nameOrConfig.defaultState || {}\n    domain = nameOrConfig.domain\n  }\n  return {\n    hook,\n    domain,\n    defaultState,\n    mainConfig,\n    maybeConfig,\n  }\n}\n\nexport function createGate<Props>(...args: unknown[]): Gate<Props> {\n  return createGateImplementation<Props>(\n    processCreateGateConfig(useGateBase, args),\n  )\n}\n","import React from 'react'\nimport {Domain, Store} from 'effector'\nimport {\n  useStoreBase,\n  useUnitBase,\n  useStoreMapBase,\n  useListBase,\n  useEventBase,\n  useGateBase,\n} from './apiBase'\nimport {withDisplayName} from './withDisplayName'\nimport {createGateImplementation, processCreateGateConfig} from './createGate'\nimport type {Gate} from './index.h'\nimport {throwError} from './throw'\nimport {deprecate} from './deprecate'\nimport {getScope} from './scope'\n\nexport function createGate<Props>(\n  ...args: Array<\n    | {\n        domain?: Domain\n        defaultState?: Props\n        name?: string\n      }\n    | {}\n  >\n) {\n  return createGateImplementation(processCreateGateConfig(useGateBase, args))\n}\n\nexport function createStoreConsumer(store: any) {\n  return (props: any) => {\n    const state = useStore(store)\n    return props.children(state)\n  }\n}\n\nexport const createContextComponent = (\n  store: any,\n  context: any,\n  renderProp: any,\n) => {\n  deprecate('createContextComponent')\n  return (props: any) => {\n    const ctx = React.useContext(context)\n    const state = useStore(store)\n    return renderProp(props, state, ctx)\n  }\n}\n\nexport const createComponent = (shape: any) => throwError('not implemented')\n\nexport const createReactState = (store: any, Component: any) => {\n  deprecate('createReactState')\n  return connect(Component)(store)\n}\n\nexport const connect = (Component: any) => (store: any) => {\n  let View: any = Component\n  if (typeof Component !== 'function') {\n    View = store\n    store = Component as any\n  }\n  const wrappedComponentName = View.displayName || View.name || 'Unknown'\n  return withDisplayName(`Connect(${wrappedComponentName})`, (props: any) =>\n    React.createElement(View, {...props, ...(useStore(store) as any)}),\n  )\n}\n\n/** useStore wrapper for scopes */\nexport function useStore<T>(store: Store<T>): T {\n  return useStoreBase(store, getScope(true))\n}\nexport function useUnit(shape) {\n  return useUnitBase(shape, getScope(true))\n}\n/** useList wrapper for scopes */\nexport function useList(store: any, opts: any) {\n  return useListBase(store, opts, getScope(true))\n}\n/** useStoreMap wrapper for scopes */\nexport function useStoreMap(configOrStore: any, separateFn: any) {\n  const scope = getScope(true)\n  if (separateFn) return useStoreMapBase([configOrStore, separateFn], scope)\n  return useStoreMapBase(\n    [\n      {\n        store: configOrStore.store,\n        keys: configOrStore.keys,\n        fn: configOrStore.fn,\n        updateFilter: configOrStore.updateFilter,\n      },\n    ],\n    scope,\n  )\n}\n\n/**\nbind event to scope\n\nworks like React.useCallback, but for scopes\n*/\nexport function useEvent(eventObject: any) {\n  return useEventBase(eventObject, getScope(true))\n}\n\n/** useGate wrapper for scopes */\nexport function useGate<Props>(\n  GateComponent: Gate<Props>,\n  props: Props = {} as any,\n) {\n  return useGateBase(GateComponent, props, getScope(true))\n}\n","export const throwError = (message: string) => {\n  throw Error(message)\n}\n","import React from 'react'\n\nexport const useIsomorphicLayoutEffect =\n  typeof window !== 'undefined' ? React.useLayoutEffect : React.useEffect\n","export function forIn<T, Key extends string = string>(\n  obj: Record<Key, T>,\n  cb: (value: T, key: Key) => void,\n) {\n  for (const key in obj) {\n    cb(obj[key], key)\n  }\n}\n\nexport const includes = <T>(list: T[], item: T) => list.includes(item)\n\nexport const removeItem = <T>(list: T[], item: T) => {\n  const pos = list.indexOf(item)\n  if (pos !== -1) {\n    list.splice(pos, 1)\n  }\n}\n\nexport const add = <T>(list: T[], item: T) => list.push(item)\n\nexport function forEach<T>(\n  list: T[],\n  fn: (item: T, index: number, list: T[]) => void,\n): void\nexport function forEach<K, T>(\n  list: Map<K, T>,\n  fn: (item: T, key: K) => void,\n): void\nexport function forEach<T>(list: Set<T>, fn: (item: T) => void): void\nexport function forEach(list: any, fn: Function) {\n  list.forEach(fn)\n}\n","export const deprecate = (method: string) =>\n  console.error(`${method} is deprecated`)\n"],"names":["createWatch","store","fn","scope","batchStep","seq","step","mov","stateRef","to","run","v","unshift","node","createNode","meta","watchOp","id","graphite","scopeLinks","additionalLinks","links","push","idx","indexOf","splice","clearNode","parent","family","owners","withDisplayName","name","Component","displayName","useStoreBase","is","throwError","subscribe","React","useCallback","cb","read","stateReader","useSyncExternalStore","useUnitBase","shape","isSingleUnit","unit","normShape","isList","Array","isArray","flagsRef","useRef","stale","justSubscribed","eventsShape","storeKeys","storeValues","eventKeys","eventValues","useMemo","current","key","event","effect","scopeBind","Object","keys","values","value","flags","cbCaller","compute","priority","batch","subs","map","forEach","resultValue","state","changed","oldVal","oldStoreKeys","oldEventKeys","oldEventValues","scopeChanged","length","i","updatedValue","includes","useStoreMapBase","configOrStore","separateFn","defaultValue","updateFilter","basicUpdateFilter","valueRef","keysRef","useSyncExternalStoreWithSelector","a","b","isEqual","keysEqual","result","undefined","update","useGateBase","GateComponent","props","open","close","set","ForkedGate","propsRef","count","useIsomorphicLayoutEffect","aKeys","bKeys","shallowCompare","getScope","forceScope","useContext","ScopeContext","processArgsToConfig","args","singleArgument","rawConfig","condition","Error","assert","isObject","isFunction","metadata","or","childConfig","and","unwrappedNestedValue","nested","processCreateGateConfig","hook","universalConfig","arg","domain","nameOrConfig","defaultStateOrConfig","defaultState","mainConfig","maybeConfig","config","isGateConfig","createGate","useGateHook","flattenConfig","fullName","compositeName","createEvent","sid","status","createStore","Boolean","serialize","on","_","reset","hooks","launch","target","params","createGateImplementation","createStoreConsumer","useStore","children","useUnit","useList","opts","list","renderItem","getKey","placeholder","Item","shortName","index","keyVal","fnRef","item","memo","keysSelfMemo","listItems","createElement","from","useListBase","useStoreMap","useEvent","eventObject","events","useEventBase","useGate","message","window","useLayoutEffect","useEffect","getState","upd","oldValue","createContext","Provider","part","obj","field","isVoid","forIn","deprecate","method","console","error","createContextComponent","context","renderProp","ctx","createComponent","createReactState","connect","View"],"mappings":"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"}