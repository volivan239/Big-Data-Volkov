function e(e){return u.add(e),n((()=>{u.delete(e)}))}function t(e){return f.add(e),n((()=>{f.delete(e)}))}function n(e){let t=()=>e();return t.unsubscribe=t,t}function r(e){let{node:t}=e;return o(t)}function o(e){let{meta:t,id:n}=e,r=(e=>e.config?e.config.loc:e.loc)(t),{sid:o,name:i,op:a}=t;return{meta:t,id:n,sid:o,name:i,kind:a,loc:r,derived:t.derived}}function i(e){let t=[],n=e.parent;for(;n;)t.push({type:'update',value:n.value,stack:n.meta||{},...r(n)}),n=n.parent;return t}function a(e){if(!e)return;let{parent:t,meta:n,id:r}=e,o=a(t)||void 0;if('factory'===n.type){let{sid:e,name:t,loc:i,method:a}=n;return{type:'factory',id:r,region:o,meta:n,sid:e,name:t,loc:i,method:a}}return{type:'region',id:r,region:o,meta:n}}import{setInspector as c,setGraphInspector as d}from'effector/effector.mjs';const u=new Set;c(((e,t)=>{let{scope:n}=e;u.forEach((o=>{o.scope!==n&&(o.scope||n)||o.fn({type:t.fail?'error':'update',value:e.value,error:t.fail?t.failReason:void 0,stack:e.meta||{},trace:o.trace?i(e):[],...r(e)})}))}));const f=new Set;d(((e,t)=>{let n;n='region'===e?a(t):((e,t)=>{let n=o(e);return{type:'unit',region:a(t),...n}})(e,t),n&&f.forEach((e=>{e.fn(n)}))}));export{e as inspect,t as inspectGraph};
//# sourceMappingURL=inspect.mjs.map
