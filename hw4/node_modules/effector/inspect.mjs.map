{"version":3,"file":"inspect.mjs","sources":["effector/inspect.ts"],"sourcesContent":["import {\n  Scope,\n  Subscription,\n  Stack,\n  Node,\n  // private\n  // @ts-expect-error\n  setInspector,\n  // private\n  // @ts-expect-error\n  setGraphInspector,\n} from 'effector'\nimport { ID } from './index.h'\n\ntype Loc = {\n  file: string\n  line: number\n  column: number\n}\n\ntype NodeCommonMeta = {\n  kind: string\n  sid?: string\n  id: string\n  name?: string\n  loc?: Loc\n  meta: Record<string, unknown>\n  derived?: boolean\n}\n\n// Watch calculations\ntype Message = {\n  type: 'update' | 'error'\n  error?: unknown\n  value: unknown\n  stack: Record<string, unknown>\n  trace?: Message[]\n} & NodeCommonMeta\n\nconst inspectSubs = new Set<{\n  scope?: Scope\n  trace?: boolean\n  fn: (message: Message) => void\n}>()\n\nsetInspector((stack: Stack, local: {fail: boolean; failReason?: unknown}) => {\n  const {scope} = stack\n  inspectSubs.forEach(config => {\n    if (\n      !(\n        // must be the same scope\n        (\n          config.scope === scope ||\n          // or no scope at all\n          (!config.scope && !scope)\n        )\n      )\n    ) {\n      /**\n       * Inspection is restriced by scope\n       */\n      return\n    }\n\n    config.fn({\n      type: local.fail ? 'error' : 'update',\n      value: stack.value,\n      error: local.fail ? local.failReason : undefined,\n      stack: stack.meta || {},\n      trace: config.trace ? collectMessageTrace(stack) : [],\n      ...getNodeMeta(stack),\n    })\n  })\n})\n\nexport function inspect(config: {\n  scope?: Scope\n  trace?: boolean\n  fn: (message: Message) => void\n}): Subscription {\n  inspectSubs.add(config)\n\n  return createSubscription(() => {\n    inspectSubs.delete(config)\n  })\n}\n\n// Track declarations and graph structure\ntype Region =\n  | {\n      type: 'region'\n      id: ID,\n      meta: Record<string, unknown>\n      region?: Region\n    }\n  | {\n      type: 'factory'\n      id: ID,\n      meta: Record<string, unknown>\n      region?: Region\n      sid?: string\n      name?: string\n      method?: string\n      loc?: {\n        file: string\n        line: number\n        column: number\n      }\n    }\n\ntype UnitDeclaration = {\n  type: 'unit'\n  meta: Record<string, unknown>\n  region?: Region\n} & NodeCommonMeta\n\ntype Declaration = UnitDeclaration | Region\n\nconst inspectGraphSubs = new Set<{\n  fn: (declaration: Declaration) => void\n}>()\n\nsetGraphInspector((node: Node | 'region', regionStack: RegionStack) => {\n  let decl: Declaration | undefined\n\n  if (node === 'region') {\n    decl = readRegionStack(regionStack)\n  } else {\n    decl = readUnitDeclaration(node, regionStack)\n  }\n\n  if (decl) {\n    inspectGraphSubs.forEach(sub => {\n      sub.fn(decl!)\n    })\n  }\n})\n\nexport function inspectGraph(config: {\n  fn: (declaration: Declaration) => void\n}): Subscription {\n  inspectGraphSubs.add(config)\n  return createSubscription(() => {\n    inspectGraphSubs.delete(config)\n  })\n}\n\n// Utils\nfunction createSubscription(cleanup: () => void): Subscription {\n  const result = () => cleanup()\n  result.unsubscribe = result\n  return result\n}\n\nfunction getNodeMeta(stack: Stack) {\n  const {node} = stack\n\n  return readNodeMeta(node)\n}\n\nfunction readNodeMeta(node: Node): NodeCommonMeta {\n  const {meta, id} = node\n  const loc = getLoc(meta)\n  const {sid, name, op: kind} = meta\n\n  return {meta, id, sid, name, kind, loc, derived: meta.derived}\n}\n\nfunction getLoc(meta: Record<string, unknown>) {\n  return meta.config ? (meta.config as any).loc : meta.loc\n}\n\nfunction collectMessageTrace(stack: Stack) {\n  const trace: Message[] = []\n  let currentStack = stack.parent\n\n  while (currentStack) {\n    trace.push({\n      type: 'update',\n      value: currentStack.value,\n      stack: currentStack.meta || {},\n      ...getNodeMeta(currentStack),\n    })\n\n    currentStack = currentStack.parent\n  }\n\n  return trace\n}\n\nfunction readUnitDeclaration(\n  node: Node,\n  regionStack: RegionStack,\n): UnitDeclaration {\n  const nodeMeta = readNodeMeta(node)\n\n  return {\n    type: 'unit',\n    region: readRegionStack(regionStack),\n    ...nodeMeta,\n  }\n}\n\nfunction readRegionStack(regionStack?: RegionStack | null): Region | undefined {\n  if (!regionStack) return\n  const {parent, meta, id} = regionStack\n  const parentRegion = readRegionStack(parent) || undefined\n\n  if (meta.type === 'factory') {\n    const {sid, name, loc, method} = meta as any\n\n    return {\n      type: 'factory',\n      id,\n      region: parentRegion,\n      meta,\n      sid,\n      name,\n      loc,\n      method,\n    }\n  }\n\n  return {\n    type: 'region',\n    id,\n    region: parentRegion,\n    meta,\n  }\n}\n\ntype RegionStack = {\n  id: ID,\n  parent: RegionStack | null\n  meta:\n    | Record<string, unknown>\n    | {\n        type: 'factory'\n        sid?: string\n        name?: string\n        method?: string\n        loc?: Loc\n      }\n}\n"],"names":["inspect","config","inspectSubs","add","createSubscription","delete","inspectGraph","inspectGraphSubs","cleanup","result","unsubscribe","getNodeMeta","stack","node","readNodeMeta","meta","id","loc","getLoc","sid","name","op","kind","derived","collectMessageTrace","trace","currentStack","parent","push","type","value","readRegionStack","regionStack","parentRegion","undefined","method","region","Set","setInspector","local","scope","forEach","fn","fail","error","failReason","setGraphInspector","decl","nodeMeta","readUnitDeclaration","sub"],"mappings":"AA2EO,SAASA,EAAQC,UAKtBC,EAAYC,IAAIF,GAETG,GAAmB,KACxBF,EAAYG,OAAOJ,MAuDhB,SAASK,EAAaL,UAG3BM,EAAiBJ,IAAIF,GACdG,GAAmB,KACxBG,EAAiBF,OAAOJ,MAK5B,SAASG,EAAmBI,OACpBC,EAAS,IAAMD,WACrBC,EAAOC,YAAcD,EACdA,EAGT,SAASE,EAAYC,OACbC,KAACA,GAAQD,SAERE,EAAaD,GAGtB,SAASC,EAAaD,OACdE,KAACA,EAADC,GAAOA,GAAMH,EACbI,EAMR,CAAgBF,GACPA,EAAKd,OAAUc,EAAKd,OAAegB,IAAMF,EAAKE,IAPzCC,CAAOH,IACbI,IAACA,EAADC,KAAMA,EAAMC,GAAIC,GAAQP,QAEvB,CAACA,KAAAA,EAAMC,GAAAA,EAAIG,IAAAA,EAAKC,KAAAA,EAAME,KAAAA,EAAML,IAAAA,EAAKM,QAASR,EAAKQ,SAOxD,SAASC,EAAoBZ,OACrBa,EAAmB,GACrBC,EAAed,EAAMe,YAElBD,GACLD,EAAMG,KAAK,CACTC,KAAM,SACNC,MAAOJ,EAAaI,MACpBlB,MAAOc,EAAaX,MAAQ,MACzBJ,EAAYe,KAGjBA,EAAeA,EAAaC,cAGvBF,EAgBT,SAASM,EAAgBC,OAClBA,EAAa,WACZL,OAACA,EAADZ,KAASA,EAATC,GAAeA,GAAMgB,EACrBC,EAAeF,EAAgBJ,SAAWO,KAE9B,YAAdnB,EAAKc,KAAoB,KACrBV,IAACA,EAADC,KAAMA,EAANH,IAAYA,EAAZkB,OAAiBA,GAAUpB,QAE1B,CACLc,KAAM,UACNb,GAAAA,EACAoB,OAAQH,EACRlB,KAAAA,EACAI,IAAAA,EACAC,KAAAA,EACAH,IAAAA,EACAkB,OAAAA,SAIG,CACLN,KAAM,SACNb,GAAAA,EACAoB,OAAQH,EACRlB,KAAAA,+EA5LJ,MAAMb,EAAc,IAAImC,IAMxBC,GAAa,CAAC1B,EAAc2B,SACpBC,MAACA,GAAS5B,EAChBV,EAAYuC,SAAQxC,IAKZA,EAAOuC,QAAUA,IAEfvC,EAAOuC,OAAUA,IAUzBvC,EAAOyC,GAAG,CACRb,KAAMU,EAAMI,KAAO,QAAU,SAC7Bb,MAAOlB,EAAMkB,MACbc,MAAOL,EAAMI,KAAOJ,EAAMM,gBAAaX,EACvCtB,MAAOA,EAAMG,MAAQ,GACrBU,MAAOxB,EAAOwB,MAAQD,EAAoBZ,GAAS,MAChDD,EAAYC,WAgDrB,MAAML,EAAmB,IAAI8B,IAI7BS,GAAkB,CAACjC,EAAuBmB,SACpCe,EAGFA,EADW,WAATlC,EACKkB,EAAgBC,GAgE3B,EACEnB,EACAmB,SAEMgB,EAAWlC,EAAaD,SAEvB,CACLgB,KAAM,OACNO,OAAQL,EAAgBC,MACrBgB,IAvEIC,CAAoBpC,EAAMmB,GAG/Be,GACFxC,EAAiBkC,SAAQS,IACvBA,EAAIR,GAAGK"}